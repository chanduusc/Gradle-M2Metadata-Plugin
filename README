This is Maven Embedder plugin for Gradle. It retrieves project information from pom.xml and configures Gradle accordingly.

WARNING #1: There is a conflict between this plugin Maven3 dependency and maven plugin Maven2 dependency.
Delete $GRADLE_HOME/lib/maven-ant-tasks-2.1.0.jar and don't use maven plugin in your build.

WARNING #2: There is a conflict between this plugin Google Guava dependency and Google Collections jar in Gradle's lib.
Replace $GRADLE_HOME/lib/google-collections-1.0.jar with guava-r06.jar (from Guava project page or from any repository).

Usage:
---------------------------
For single module the only mandatory code in build.gradle are:

buildscript {
  repositories {
    mavenRepo urls: ["http://repo.jfrog.org/artifactory/gradle"]
  }

  dependencies {
    classpath "org.gradle.plugins:gradle-mavenembedder-plugin:0.1"
  }
}

apply plugin: org.gradle.plugin.maven.MavenEmbedderPlugin

For multi-module you must list all your modules in settings.gradle as usual. Your parent build.gradle will look like:

buildscript {
  repositories {
    mavenRepo urls: ["http://repo.jfrog.org/artifactory/gradle"]
  }

  dependencies {
    classpath "org.gradle.plugins:gradle-mavenembedder-plugin:0.1"
  }
}

subprojects {
apply plugin: org.gradle.plugin.maven.MavenEmbedderPlugin
}

See the bug related to multimodule build listed in TODO.

Features list:
---------------------------
* Applying plugins for packagings: jar, war
* Dependencies in compile, provided and test scopes
* Exclusions for dependencies
* Maven repositories (both from pom.xml and profiles in settings.xml)
* Turn on transitivity for compile scope
* Add project version, groupId and status (SNAPSHOT/release)
* Java compiler source and target levels
* Add source packaging if source-plugin present
* Executes maven-clean-plugin after Gradle's Java plugin clean task

TODO list:
------------------------------
Bugs:
* Fix test scope interproject dependencies

Features:
* Packagings: pom, ejb, ear, ?
* Execute additional maven plugins with Gradle tasks. Which?
* Add maven artifactId in uploadArchives*
* Add deployment to maven repo in uploadArchives*
* Apply maven plugin*

-------
*once classpath issue will be solved